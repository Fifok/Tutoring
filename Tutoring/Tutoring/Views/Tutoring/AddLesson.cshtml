@model Tutoring.Models.TutoringVM.AddLessonViewModel
@using DynamicVML.Extensions

@{
    ViewData["Title"] = "Add new lesson";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Add Lesson</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddLesson" asp-route-tutoringId="@Context.Request.Query["tutoringId"]" id="form">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div id="content" class="form-group">
                @Html.ListEditorFor(x => x.Content, Url.Action("AddContent"), "Add content")
            </div>
            <div class="form-group">
                <input type="submit" value="Add tutorial" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index" asp-controller="Tutoring" asp-route-id="@Context.Request.Query["tutoringId"]">Back</a>
</div>

@section Scripts {
    <script src="~/lib/dynamic-viewmodel-lists/dvml.js"></script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
